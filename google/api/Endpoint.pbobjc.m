// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/endpoint.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "google/api/Endpoint.pbobjc.h"
 #import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GAPIEndpointRoot

@implementation GAPIEndpointRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - GAPIEndpointRoot_FileDescriptor

static GPBFileDescriptor *GAPIEndpointRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.api"
                                                 objcPrefix:@"GAPI"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GAPIEndpoint

@implementation GAPIEndpoint

@dynamic name;
@dynamic aliasesArray, aliasesArray_Count;
@dynamic apisArray, apisArray_Count;
@dynamic featuresArray, featuresArray_Count;
@dynamic target;
@dynamic allowCors;

typedef struct GAPIEndpoint__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSMutableArray *aliasesArray;
  NSMutableArray *apisArray;
  NSMutableArray *featuresArray;
  NSString *target;
} GAPIEndpoint__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = GAPIEndpoint_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GAPIEndpoint__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "aliasesArray",
        .dataTypeSpecific.className = NULL,
        .number = GAPIEndpoint_FieldNumber_AliasesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GAPIEndpoint__storage_, aliasesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "apisArray",
        .dataTypeSpecific.className = NULL,
        .number = GAPIEndpoint_FieldNumber_ApisArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GAPIEndpoint__storage_, apisArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "featuresArray",
        .dataTypeSpecific.className = NULL,
        .number = GAPIEndpoint_FieldNumber_FeaturesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GAPIEndpoint__storage_, featuresArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "allowCors",
        .dataTypeSpecific.className = NULL,
        .number = GAPIEndpoint_FieldNumber_AllowCors,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "target",
        .dataTypeSpecific.className = NULL,
        .number = GAPIEndpoint_FieldNumber_Target,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GAPIEndpoint__storage_, target),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GAPIEndpoint class]
                                     rootClass:[GAPIEndpointRoot class]
                                          file:GAPIEndpointRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GAPIEndpoint__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
