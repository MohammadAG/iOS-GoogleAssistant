// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/consumer.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Property;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Property_PropertyType

/** Supported data type of the property values */
typedef GPB_ENUM(Property_PropertyType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Property_PropertyType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** The type is unspecified, and will result in an error. */
  Property_PropertyType_Unspecified = 0,

  /** The type is `int64`. */
  Property_PropertyType_Int64 = 1,

  /** The type is `bool`. */
  Property_PropertyType_Bool = 2,

  /** The type is `string`. */
  Property_PropertyType_String = 3,

  /** The type is 'double'. */
  Property_PropertyType_Double = 4,
};

GPBEnumDescriptor *Property_PropertyType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Property_PropertyType_IsValidValue(int32_t value);

#pragma mark - ConsumerRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ConsumerRoot : GPBRootObject
@end

#pragma mark - ProjectProperties

typedef GPB_ENUM(ProjectProperties_FieldNumber) {
  ProjectProperties_FieldNumber_PropertiesArray = 1,
};

/**
 * A descriptor for defining project properties for a service. One service may
 * have many consumer projects, and the service may want to behave differently
 * depending on some properties on the project. For example, a project may be
 * associated with a school, or a business, or a government agency, a business
 * type property on the project may affect how a service responds to the client.
 * This descriptor defines which properties are allowed to be set on a project.
 *
 * Example:
 *
 *    project_properties:
 *      properties:
 *      - name: NO_WATERMARK
 *        type: BOOL
 *        description: Allows usage of the API without watermarks.
 *      - name: EXTENDED_TILE_CACHE_PERIOD
 *        type: INT64
 **/
@interface ProjectProperties : GPBMessage

/** List of per consumer project-specific properties. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Property*> *propertiesArray;
/** The number of items in @c propertiesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger propertiesArray_Count;

@end

#pragma mark - Property

typedef GPB_ENUM(Property_FieldNumber) {
  Property_FieldNumber_Name = 1,
  Property_FieldNumber_Type = 2,
  Property_FieldNumber_Description_p = 3,
};

/**
 * Defines project properties.
 *
 * API services can define properties that can be assigned to consumer projects
 * so that backends can perform response customization without having to make
 * additional calls or maintain additional storage. For example, Maps API
 * defines properties that controls map tile cache period, or whether to embed a
 * watermark in a result.
 *
 * These values can be set via API producer console. Only API providers can
 * define and set these properties.
 **/
@interface Property : GPBMessage

/** The name of the property (a.k.a key). */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** The type of this property. */
@property(nonatomic, readwrite) Property_PropertyType type;

/** The description of the property */
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

@end

/**
 * Fetches the raw value of a @c Property's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Property_Type_RawValue(Property *message);
/**
 * Sets the raw value of an @c Property's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetProperty_Type_RawValue(Property *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
