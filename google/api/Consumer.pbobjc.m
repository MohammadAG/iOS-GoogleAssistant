// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/consumer.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "google/api/Consumer.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ConsumerRoot

@implementation ConsumerRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ConsumerRoot_FileDescriptor

static GPBFileDescriptor *ConsumerRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.api"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ProjectProperties

@implementation ProjectProperties

@dynamic propertiesArray, propertiesArray_Count;

typedef struct ProjectProperties__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *propertiesArray;
} ProjectProperties__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "propertiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Property),
        .number = ProjectProperties_FieldNumber_PropertiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ProjectProperties__storage_, propertiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProjectProperties class]
                                     rootClass:[ConsumerRoot class]
                                          file:ConsumerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ProjectProperties__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Property

@implementation Property

@dynamic name;
@dynamic type;
@dynamic description_p;

typedef struct Property__storage_ {
  uint32_t _has_storage_[1];
  Property_PropertyType type;
  NSString *name;
  NSString *description_p;
} Property__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Property_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Property__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Property_PropertyType_EnumDescriptor,
        .number = Property_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Property__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = Property_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Property__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Property class]
                                     rootClass:[ConsumerRoot class]
                                          file:ConsumerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Property__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Property_Type_RawValue(Property *message) {
  GPBDescriptor *descriptor = [Property descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Property_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetProperty_Type_RawValue(Property *message, int32_t value) {
  GPBDescriptor *descriptor = [Property descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Property_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum Property_PropertyType

GPBEnumDescriptor *Property_PropertyType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unspecified\000Int64\000Bool\000String\000Double\000";
    static const int32_t values[] = {
        Property_PropertyType_Unspecified,
        Property_PropertyType_Int64,
        Property_PropertyType_Bool,
        Property_PropertyType_String,
        Property_PropertyType_Double,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Property_PropertyType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Property_PropertyType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Property_PropertyType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Property_PropertyType_Unspecified:
    case Property_PropertyType_Int64:
    case Property_PropertyType_Bool:
    case Property_PropertyType_String:
    case Property_PropertyType_Double:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
