// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/auth.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "google/api/Auth.pbobjc.h"
 #import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GAPIAuthRoot

@implementation GAPIAuthRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - GAPIAuthRoot_FileDescriptor

static GPBFileDescriptor *GAPIAuthRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.api"
                                                 objcPrefix:@"GAPI"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GAPIAuthentication

@implementation GAPIAuthentication

@dynamic rulesArray, rulesArray_Count;
@dynamic providersArray, providersArray_Count;

typedef struct GAPIAuthentication__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *rulesArray;
  NSMutableArray *providersArray;
} GAPIAuthentication__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rulesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GAPIAuthenticationRule),
        .number = GAPIAuthentication_FieldNumber_RulesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GAPIAuthentication__storage_, rulesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "providersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GAPIAuthProvider),
        .number = GAPIAuthentication_FieldNumber_ProvidersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GAPIAuthentication__storage_, providersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GAPIAuthentication class]
                                     rootClass:[GAPIAuthRoot class]
                                          file:GAPIAuthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GAPIAuthentication__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GAPIAuthenticationRule

@implementation GAPIAuthenticationRule

@dynamic selector;
@dynamic hasOauth, oauth;
@dynamic allowWithoutCredential;
@dynamic requirementsArray, requirementsArray_Count;

typedef struct GAPIAuthenticationRule__storage_ {
  uint32_t _has_storage_[1];
  NSString *selector;
  GAPIOAuthRequirements *oauth;
  NSMutableArray *requirementsArray;
} GAPIAuthenticationRule__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "selector",
        .dataTypeSpecific.className = NULL,
        .number = GAPIAuthenticationRule_FieldNumber_Selector,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GAPIAuthenticationRule__storage_, selector),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "oauth",
        .dataTypeSpecific.className = GPBStringifySymbol(GAPIOAuthRequirements),
        .number = GAPIAuthenticationRule_FieldNumber_Oauth,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GAPIAuthenticationRule__storage_, oauth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "allowWithoutCredential",
        .dataTypeSpecific.className = NULL,
        .number = GAPIAuthenticationRule_FieldNumber_AllowWithoutCredential,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "requirementsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GAPIAuthRequirement),
        .number = GAPIAuthenticationRule_FieldNumber_RequirementsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GAPIAuthenticationRule__storage_, requirementsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GAPIAuthenticationRule class]
                                     rootClass:[GAPIAuthRoot class]
                                          file:GAPIAuthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GAPIAuthenticationRule__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GAPIAuthProvider

@implementation GAPIAuthProvider

@dynamic id_p;
@dynamic issuer;
@dynamic jwksUri;
@dynamic audiences;

typedef struct GAPIAuthProvider__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *issuer;
  NSString *jwksUri;
  NSString *audiences;
} GAPIAuthProvider__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = GAPIAuthProvider_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GAPIAuthProvider__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "issuer",
        .dataTypeSpecific.className = NULL,
        .number = GAPIAuthProvider_FieldNumber_Issuer,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GAPIAuthProvider__storage_, issuer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "jwksUri",
        .dataTypeSpecific.className = NULL,
        .number = GAPIAuthProvider_FieldNumber_JwksUri,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GAPIAuthProvider__storage_, jwksUri),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "audiences",
        .dataTypeSpecific.className = NULL,
        .number = GAPIAuthProvider_FieldNumber_Audiences,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GAPIAuthProvider__storage_, audiences),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GAPIAuthProvider class]
                                     rootClass:[GAPIAuthRoot class]
                                          file:GAPIAuthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GAPIAuthProvider__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GAPIOAuthRequirements

@implementation GAPIOAuthRequirements

@dynamic canonicalScopes;

typedef struct GAPIOAuthRequirements__storage_ {
  uint32_t _has_storage_[1];
  NSString *canonicalScopes;
} GAPIOAuthRequirements__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "canonicalScopes",
        .dataTypeSpecific.className = NULL,
        .number = GAPIOAuthRequirements_FieldNumber_CanonicalScopes,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GAPIOAuthRequirements__storage_, canonicalScopes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GAPIOAuthRequirements class]
                                     rootClass:[GAPIAuthRoot class]
                                          file:GAPIAuthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GAPIOAuthRequirements__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GAPIAuthRequirement

@implementation GAPIAuthRequirement

@dynamic providerId;
@dynamic audiences;

typedef struct GAPIAuthRequirement__storage_ {
  uint32_t _has_storage_[1];
  NSString *providerId;
  NSString *audiences;
} GAPIAuthRequirement__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "providerId",
        .dataTypeSpecific.className = NULL,
        .number = GAPIAuthRequirement_FieldNumber_ProviderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GAPIAuthRequirement__storage_, providerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "audiences",
        .dataTypeSpecific.className = NULL,
        .number = GAPIAuthRequirement_FieldNumber_Audiences,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GAPIAuthRequirement__storage_, audiences),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GAPIAuthRequirement class]
                                     rootClass:[GAPIAuthRoot class]
                                          file:GAPIAuthRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GAPIAuthRequirement__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
