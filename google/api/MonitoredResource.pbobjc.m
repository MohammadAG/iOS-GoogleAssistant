// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/monitored_resource.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "google/api/MonitoredResource.pbobjc.h"
 #import "google/api/Label.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GAPIMonitoredResourceRoot

@implementation GAPIMonitoredResourceRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - GAPIMonitoredResourceRoot_FileDescriptor

static GPBFileDescriptor *GAPIMonitoredResourceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.api"
                                                 objcPrefix:@"GAPI"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GAPIMonitoredResourceDescriptor

@implementation GAPIMonitoredResourceDescriptor

@dynamic name;
@dynamic type;
@dynamic displayName;
@dynamic description_p;
@dynamic labelsArray, labelsArray_Count;

typedef struct GAPIMonitoredResourceDescriptor__storage_ {
  uint32_t _has_storage_[1];
  NSString *type;
  NSString *displayName;
  NSString *description_p;
  NSMutableArray *labelsArray;
  NSString *name;
} GAPIMonitoredResourceDescriptor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = GAPIMonitoredResourceDescriptor_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GAPIMonitoredResourceDescriptor__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "displayName",
        .dataTypeSpecific.className = NULL,
        .number = GAPIMonitoredResourceDescriptor_FieldNumber_DisplayName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GAPIMonitoredResourceDescriptor__storage_, displayName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = GAPIMonitoredResourceDescriptor_FieldNumber_Description_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GAPIMonitoredResourceDescriptor__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "labelsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GAPILabelDescriptor),
        .number = GAPIMonitoredResourceDescriptor_FieldNumber_LabelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GAPIMonitoredResourceDescriptor__storage_, labelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = GAPIMonitoredResourceDescriptor_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GAPIMonitoredResourceDescriptor__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GAPIMonitoredResourceDescriptor class]
                                     rootClass:[GAPIMonitoredResourceRoot class]
                                          file:GAPIMonitoredResourceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GAPIMonitoredResourceDescriptor__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GAPIMonitoredResource

@implementation GAPIMonitoredResource

@dynamic type;
@dynamic labels, labels_Count;

typedef struct GAPIMonitoredResource__storage_ {
  uint32_t _has_storage_[1];
  NSString *type;
  NSMutableDictionary *labels;
} GAPIMonitoredResource__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = GAPIMonitoredResource_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GAPIMonitoredResource__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "labels",
        .dataTypeSpecific.className = NULL,
        .number = GAPIMonitoredResource_FieldNumber_Labels,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GAPIMonitoredResource__storage_, labels),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GAPIMonitoredResource class]
                                     rootClass:[GAPIMonitoredResourceRoot class]
                                          file:GAPIMonitoredResourceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GAPIMonitoredResource__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
