// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/system_parameter.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "google/api/SystemParameter.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GAPISystemParameterRoot

@implementation GAPISystemParameterRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - GAPISystemParameterRoot_FileDescriptor

static GPBFileDescriptor *GAPISystemParameterRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.api"
                                                 objcPrefix:@"GAPI"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GAPISystemParameters

@implementation GAPISystemParameters

@dynamic rulesArray, rulesArray_Count;

typedef struct GAPISystemParameters__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *rulesArray;
} GAPISystemParameters__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rulesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GAPISystemParameterRule),
        .number = GAPISystemParameters_FieldNumber_RulesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GAPISystemParameters__storage_, rulesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GAPISystemParameters class]
                                     rootClass:[GAPISystemParameterRoot class]
                                          file:GAPISystemParameterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GAPISystemParameters__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GAPISystemParameterRule

@implementation GAPISystemParameterRule

@dynamic selector;
@dynamic parametersArray, parametersArray_Count;

typedef struct GAPISystemParameterRule__storage_ {
  uint32_t _has_storage_[1];
  NSString *selector;
  NSMutableArray *parametersArray;
} GAPISystemParameterRule__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "selector",
        .dataTypeSpecific.className = NULL,
        .number = GAPISystemParameterRule_FieldNumber_Selector,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GAPISystemParameterRule__storage_, selector),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "parametersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GAPISystemParameter),
        .number = GAPISystemParameterRule_FieldNumber_ParametersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GAPISystemParameterRule__storage_, parametersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GAPISystemParameterRule class]
                                     rootClass:[GAPISystemParameterRoot class]
                                          file:GAPISystemParameterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GAPISystemParameterRule__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GAPISystemParameter

@implementation GAPISystemParameter

@dynamic name;
@dynamic HTTPHeader;
@dynamic URLQueryParameter;

typedef struct GAPISystemParameter__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *HTTPHeader;
  NSString *URLQueryParameter;
} GAPISystemParameter__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = GAPISystemParameter_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GAPISystemParameter__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "HTTPHeader",
        .dataTypeSpecific.className = NULL,
        .number = GAPISystemParameter_FieldNumber_HTTPHeader,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GAPISystemParameter__storage_, HTTPHeader),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URLQueryParameter",
        .dataTypeSpecific.className = NULL,
        .number = GAPISystemParameter_FieldNumber_URLQueryParameter,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GAPISystemParameter__storage_, URLQueryParameter),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GAPISystemParameter class]
                                     rootClass:[GAPISystemParameterRoot class]
                                          file:GAPISystemParameterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GAPISystemParameter__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002!!!!\246\000\003!!!\245\251\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
