// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/config_change.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "google/api/ConfigChange.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GAPIConfigChangeRoot

@implementation GAPIConfigChangeRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - GAPIConfigChangeRoot_FileDescriptor

static GPBFileDescriptor *GAPIConfigChangeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.api"
                                                 objcPrefix:@"GAPI"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum GAPIChangeType

GPBEnumDescriptor *GAPIChangeType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "ChangeTypeUnspecified\000Added\000Removed\000Modi"
        "fied\000";
    static const int32_t values[] = {
        GAPIChangeType_ChangeTypeUnspecified,
        GAPIChangeType_Added,
        GAPIChangeType_Removed,
        GAPIChangeType_Modified,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GAPIChangeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GAPIChangeType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GAPIChangeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case GAPIChangeType_ChangeTypeUnspecified:
    case GAPIChangeType_Added:
    case GAPIChangeType_Removed:
    case GAPIChangeType_Modified:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GAPIConfigChange

@implementation GAPIConfigChange

@dynamic element;
@dynamic oldValue;
@dynamic newValue;
@dynamic changeType;
@dynamic advicesArray, advicesArray_Count;

typedef struct GAPIConfigChange__storage_ {
  uint32_t _has_storage_[1];
  GAPIChangeType changeType;
  NSString *element;
  NSString *oldValue;
  NSString *newValue;
  NSMutableArray *advicesArray;
} GAPIConfigChange__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "element",
        .dataTypeSpecific.className = NULL,
        .number = GAPIConfigChange_FieldNumber_Element,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GAPIConfigChange__storage_, element),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "oldValue",
        .dataTypeSpecific.className = NULL,
        .number = GAPIConfigChange_FieldNumber_OldValue,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GAPIConfigChange__storage_, oldValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "newValue",
        .dataTypeSpecific.className = NULL,
        .number = GAPIConfigChange_FieldNumber_NewValue,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GAPIConfigChange__storage_, newValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "changeType",
        .dataTypeSpecific.enumDescFunc = GAPIChangeType_EnumDescriptor,
        .number = GAPIConfigChange_FieldNumber_ChangeType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GAPIConfigChange__storage_, changeType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "advicesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GAPIAdvice),
        .number = GAPIConfigChange_FieldNumber_AdvicesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GAPIConfigChange__storage_, advicesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GAPIConfigChange class]
                                     rootClass:[GAPIConfigChangeRoot class]
                                          file:GAPIConfigChangeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GAPIConfigChange__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GAPIConfigChange_ChangeType_RawValue(GAPIConfigChange *message) {
  GPBDescriptor *descriptor = [GAPIConfigChange descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GAPIConfigChange_FieldNumber_ChangeType];
  return GPBGetMessageInt32Field(message, field);
}

void SetGAPIConfigChange_ChangeType_RawValue(GAPIConfigChange *message, int32_t value) {
  GPBDescriptor *descriptor = [GAPIConfigChange descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GAPIConfigChange_FieldNumber_ChangeType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GAPIAdvice

@implementation GAPIAdvice

@dynamic description_p;

typedef struct GAPIAdvice__storage_ {
  uint32_t _has_storage_[1];
  NSString *description_p;
} GAPIAdvice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = GAPIAdvice_FieldNumber_Description_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GAPIAdvice__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GAPIAdvice class]
                                     rootClass:[GAPIConfigChangeRoot class]
                                          file:GAPIConfigChangeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GAPIAdvice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
