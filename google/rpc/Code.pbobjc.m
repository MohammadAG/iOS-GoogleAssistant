// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/rpc/code.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "google/rpc/Code.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - RPCCodeRoot

@implementation RPCCodeRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - Enum RPCCode

GPBEnumDescriptor *RPCCode_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Ok\000Cancelled\000Unknown\000InvalidArgument\000Dea"
        "dlineExceeded\000NotFound\000AlreadyExists\000Per"
        "missionDenied\000Unauthenticated\000ResourceEx"
        "hausted\000FailedPrecondition\000Aborted\000OutOf"
        "Range\000Unimplemented\000Internal\000Unavailable"
        "\000DataLoss\000";
    static const int32_t values[] = {
        RPCCode_Ok,
        RPCCode_Cancelled,
        RPCCode_Unknown,
        RPCCode_InvalidArgument,
        RPCCode_DeadlineExceeded,
        RPCCode_NotFound,
        RPCCode_AlreadyExists,
        RPCCode_PermissionDenied,
        RPCCode_Unauthenticated,
        RPCCode_ResourceExhausted,
        RPCCode_FailedPrecondition,
        RPCCode_Aborted,
        RPCCode_OutOfRange,
        RPCCode_Unimplemented,
        RPCCode_Internal,
        RPCCode_Unavailable,
        RPCCode_DataLoss,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCCode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCCode_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCCode_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCCode_Ok:
    case RPCCode_Cancelled:
    case RPCCode_Unknown:
    case RPCCode_InvalidArgument:
    case RPCCode_DeadlineExceeded:
    case RPCCode_NotFound:
    case RPCCode_AlreadyExists:
    case RPCCode_PermissionDenied:
    case RPCCode_Unauthenticated:
    case RPCCode_ResourceExhausted:
    case RPCCode_FailedPrecondition:
    case RPCCode_Aborted:
    case RPCCode_OutOfRange:
    case RPCCode_Unimplemented:
    case RPCCode_Internal:
    case RPCCode_Unavailable:
    case RPCCode_DataLoss:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
