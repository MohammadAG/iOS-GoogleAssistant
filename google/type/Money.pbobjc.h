// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/type/money.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - GTPMoneyRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface GTPMoneyRoot : GPBRootObject
@end

#pragma mark - GTPMoney

typedef GPB_ENUM(GTPMoney_FieldNumber) {
  GTPMoney_FieldNumber_CurrencyCode = 1,
  GTPMoney_FieldNumber_Units = 2,
  GTPMoney_FieldNumber_Nanos = 3,
};

/**
 * Represents an amount of money with its currency type.
 **/
@interface GTPMoney : GPBMessage

/** The 3-letter currency code defined in ISO 4217. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *currencyCode;

/**
 * The whole units of the amount.
 * For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
 **/
@property(nonatomic, readwrite) int64_t units;

/**
 * Number of nano (10^-9) units of the amount.
 * The value must be between -999,999,999 and +999,999,999 inclusive.
 * If `units` is positive, `nanos` must be positive or zero.
 * If `units` is zero, `nanos` can be positive, zero, or negative.
 * If `units` is negative, `nanos` must be negative or zero.
 * For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
 **/
@property(nonatomic, readwrite) int32_t nanos;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
