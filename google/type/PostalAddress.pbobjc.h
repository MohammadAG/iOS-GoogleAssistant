// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/type/postal_address.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - GTPPostalAddressRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface GTPPostalAddressRoot : GPBRootObject
@end

#pragma mark - GTPPostalAddress

typedef GPB_ENUM(GTPPostalAddress_FieldNumber) {
  GTPPostalAddress_FieldNumber_Revision = 1,
  GTPPostalAddress_FieldNumber_RegionCode = 2,
  GTPPostalAddress_FieldNumber_LanguageCode = 3,
  GTPPostalAddress_FieldNumber_PostalCode = 4,
  GTPPostalAddress_FieldNumber_SortingCode = 5,
  GTPPostalAddress_FieldNumber_AdministrativeArea = 6,
  GTPPostalAddress_FieldNumber_Locality = 7,
  GTPPostalAddress_FieldNumber_Sublocality = 8,
  GTPPostalAddress_FieldNumber_AddressLinesArray = 9,
  GTPPostalAddress_FieldNumber_RecipientsArray = 10,
  GTPPostalAddress_FieldNumber_Organization = 11,
};

/**
 * Represents a postal address, e.g. for postal delivery or payments addresses.
 * Given a postal address, a postal service can deliver items to a premise, P.O.
 * Box or similar.
 * It is not intended to model geographical locations (roads, towns,
 * mountains).
 *
 * In typical usage an address would be created via user input or from importing
 * existing data, depending on the type of process.
 *
 * Advice on address input / editing:
 *  - Use an i18n-ready address widget such as
 *    https://github.com/googlei18n/libaddressinput)
 * - Users should not be presented with UI elements for input or editing of
 *   fields outside countries where that field is used.
 *
 * For more guidance on how to use this schema, please see:
 * https://support.google.com/business/answer/6397478
 **/
@interface GTPPostalAddress : GPBMessage

/**
 * The schema revision of the `PostalAddress`.
 * All new revisions **must** be backward compatible with old revisions.
 **/
@property(nonatomic, readwrite) int32_t revision;

/**
 * Required. CLDR region code of the country/region of the address. This
 * is never inferred and it is up to the user to ensure the value is
 * correct. See http://cldr.unicode.org/ and
 * http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html
 * for details. Example: "CH" for Switzerland.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *regionCode;

/**
 * Optional. BCP-47 language code of the contents of this address (if
 * known). This is often the UI language of the input form or is expected
 * to match one of the languages used in the address' country/region, or their
 * transliterated equivalents.
 * This can affect formatting in certain countries, but is not critical
 * to the correctness of the data and will never affect any validation or
 * other non-formatting related operations.
 *
 * If this value is not known, it should be omitted (rather than specifying a
 * possibly incorrect default).
 *
 * Examples: "zh-Hant", "ja", "ja-Latn", "en".
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *languageCode;

/**
 * Optional. Postal code of the address. Not all countries use or require
 * postal codes to be present, but where they are used, they may trigger
 * additional validation with other parts of the address (e.g. state/zip
 * validation in the U.S.A.).
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *postalCode;

/**
 * Optional. Additional, country-specific, sorting code. This is not used
 * in most regions. Where it is used, the value is either a string like
 * "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number
 * alone, representing the "sector code" (Jamaica), "delivery area indicator"
 * (Malawi) or "post office indicator" (e.g. CÃ´te d'Ivoire).
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *sortingCode;

/**
 * Optional. Highest administrative subdivision which is used for postal
 * addresses of a country or region.
 * For example, this can be a state, a province, an oblast, or a prefecture.
 * Specifically, for Spain this is the province and not the autonomous
 * community (e.g. "Barcelona" and not "Catalonia").
 * Many countries don't use an administrative area in postal addresses. E.g.
 * in Switzerland this should be left unpopulated.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *administrativeArea;

/**
 * Optional. Generally refers to the city/town portion of the address.
 * Examples: US city, IT comune, UK post town.
 * In regions of the world where localities are not well defined or do not fit
 * into this structure well, leave locality empty and use address_lines.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *locality;

/**
 * Optional. Sublocality of the address.
 * For example, this can be neighborhoods, boroughs, districts.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *sublocality;

/**
 * Unstructured address lines describing the lower levels of an address.
 *
 * Because values in address_lines do not have type information and may
 * sometimes contain multiple values in a single field (e.g.
 * "Austin, TX"), it is important that the line order is clear. The order of
 * address lines should be "envelope order" for the country/region of the
 * address. In places where this can vary (e.g. Japan), address_language is
 * used to make it explicit (e.g. "ja" for large-to-small ordering and
 * "ja-Latn" or "en" for small-to-large). This way, the most specific line of
 * an address can be selected based on the language.
 *
 * The minimum permitted structural representation of an address consists
 * of a region_code with all remaining information placed in the
 * address_lines. It would be possible to format such an address very
 * approximately without geocoding, but no semantic reasoning could be
 * made about any of the address components until it was at least
 * partially resolved.
 *
 * Creating an address only containing a region_code and address_lines, and
 * then geocoding is the recommended way to handle completely unstructured
 * addresses (as opposed to guessing which parts of the address should be
 * localities or administrative areas).
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *addressLinesArray;
/** The number of items in @c addressLinesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger addressLinesArray_Count;

/**
 * Optional. The recipient at the address.
 * This field may, under certain circumstances, contain multiline information.
 * For example, it might contain "care of" information.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *recipientsArray;
/** The number of items in @c recipientsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger recipientsArray_Count;

/** Optional. The name of the organization at the address. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *organization;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
